//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DuplexClient.PayloadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayloadConfig", Namespace="http://schemas.datacontract.org/2004/07/PayloadService")]
    [System.SerializableAttribute()]
    public partial class PayloadConfig : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TelemetryData", Namespace="http://schemas.datacontract.org/2004/07/PayloadService")]
    [System.SerializableAttribute()]
    public partial class TelemetryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int altitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double latitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double longtitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int temperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int timeToOrbitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int altitude {
            get {
                return this.altitudeField;
            }
            set {
                if ((this.altitudeField.Equals(value) != true)) {
                    this.altitudeField = value;
                    this.RaisePropertyChanged("altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double latitude {
            get {
                return this.latitudeField;
            }
            set {
                if ((this.latitudeField.Equals(value) != true)) {
                    this.latitudeField = value;
                    this.RaisePropertyChanged("latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double longtitude {
            get {
                return this.longtitudeField;
            }
            set {
                if ((this.longtitudeField.Equals(value) != true)) {
                    this.longtitudeField = value;
                    this.RaisePropertyChanged("longtitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int temperature {
            get {
                return this.temperatureField;
            }
            set {
                if ((this.temperatureField.Equals(value) != true)) {
                    this.temperatureField = value;
                    this.RaisePropertyChanged("temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int timeToOrbit {
            get {
                return this.timeToOrbitField;
            }
            set {
                if ((this.timeToOrbitField.Equals(value) != true)) {
                    this.timeToOrbitField = value;
                    this.RaisePropertyChanged("timeToOrbit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayloadData", Namespace="http://schemas.datacontract.org/2004/07/PayloadService")]
    [System.SerializableAttribute()]
    public partial class PayloadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuplexClient.PayloadService.Communication comField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] imageByteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DuplexClient.PayloadService.Scientific sciField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuplexClient.PayloadService.Communication com {
            get {
                return this.comField;
            }
            set {
                if ((object.ReferenceEquals(this.comField, value) != true)) {
                    this.comField = value;
                    this.RaisePropertyChanged("com");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] imageByte {
            get {
                return this.imageByteField;
            }
            set {
                if ((object.ReferenceEquals(this.imageByteField, value) != true)) {
                    this.imageByteField = value;
                    this.RaisePropertyChanged("imageByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DuplexClient.PayloadService.Scientific sci {
            get {
                return this.sciField;
            }
            set {
                if ((object.ReferenceEquals(this.sciField, value) != true)) {
                    this.sciField = value;
                    this.RaisePropertyChanged("sci");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Communication", Namespace="http://schemas.datacontract.org/2004/07/PayloadService")]
    [System.SerializableAttribute()]
    public partial class Communication : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DownlinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UplinkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Downlink {
            get {
                return this.DownlinkField;
            }
            set {
                if ((this.DownlinkField.Equals(value) != true)) {
                    this.DownlinkField = value;
                    this.RaisePropertyChanged("Downlink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Uplink {
            get {
                return this.UplinkField;
            }
            set {
                if ((this.UplinkField.Equals(value) != true)) {
                    this.UplinkField = value;
                    this.RaisePropertyChanged("Uplink");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Scientific", Namespace="http://schemas.datacontract.org/2004/07/PayloadService")]
    [System.SerializableAttribute()]
    public partial class Scientific : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SnowField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rain {
            get {
                return this.RainField;
            }
            set {
                if ((this.RainField.Equals(value) != true)) {
                    this.RainField = value;
                    this.RaisePropertyChanged("Rain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Snow {
            get {
                return this.SnowField;
            }
            set {
                if ((this.SnowField.Equals(value) != true)) {
                    this.SnowField = value;
                    this.RaisePropertyChanged("Snow");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PayloadService.IPayloadService", CallbackContract=typeof(DuplexClient.PayloadService.IPayloadServiceCallback))]
    public interface IPayloadService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StartTelemetry")]
        void StartTelemetry(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StartTelemetry")]
        System.Threading.Tasks.Task StartTelemetryAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StopTelemetry")]
        void StopTelemetry(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StopTelemetry")]
        System.Threading.Tasks.Task StopTelemetryAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/LaunchPayload")]
        void LaunchPayload(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig, int altitude, int Latitude, int Longtitude);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/LaunchPayload")]
        System.Threading.Tasks.Task LaunchPayloadAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig, int altitude, int Latitude, int Longtitude);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StartData")]
        void StartData(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StartData")]
        System.Threading.Tasks.Task StartDataAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StopData")]
        void StopData(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/StopData")]
        System.Threading.Tasks.Task StopDataAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/PayloadProcess")]
        void PayloadProcess(DuplexClient.PayloadService.TelemetryData telemetry, int serviceInd);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPayloadService/PayloadProcessData")]
        void PayloadProcessData(DuplexClient.PayloadService.PayloadData PLdata, int serviceInd, string PLtype);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayloadServiceChannel : DuplexClient.PayloadService.IPayloadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayloadServiceClient : System.ServiceModel.DuplexClientBase<DuplexClient.PayloadService.IPayloadService>, DuplexClient.PayloadService.IPayloadService {
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PayloadServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void StartTelemetry(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            base.Channel.StartTelemetry(serviceInd, PLconfig);
        }
        
        public System.Threading.Tasks.Task StartTelemetryAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            return base.Channel.StartTelemetryAsync(serviceInd, PLconfig);
        }
        
        public void StopTelemetry(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            base.Channel.StopTelemetry(serviceInd, PLconfig);
        }
        
        public System.Threading.Tasks.Task StopTelemetryAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            return base.Channel.StopTelemetryAsync(serviceInd, PLconfig);
        }
        
        public void LaunchPayload(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig, int altitude, int Latitude, int Longtitude) {
            base.Channel.LaunchPayload(serviceInd, PLconfig, altitude, Latitude, Longtitude);
        }
        
        public System.Threading.Tasks.Task LaunchPayloadAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig, int altitude, int Latitude, int Longtitude) {
            return base.Channel.LaunchPayloadAsync(serviceInd, PLconfig, altitude, Latitude, Longtitude);
        }
        
        public void StartData(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            base.Channel.StartData(serviceInd, PLconfig);
        }
        
        public System.Threading.Tasks.Task StartDataAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            return base.Channel.StartDataAsync(serviceInd, PLconfig);
        }
        
        public void StopData(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            base.Channel.StopData(serviceInd, PLconfig);
        }
        
        public System.Threading.Tasks.Task StopDataAsync(int serviceInd, DuplexClient.PayloadService.PayloadConfig PLconfig) {
            return base.Channel.StopDataAsync(serviceInd, PLconfig);
        }
    }
}
